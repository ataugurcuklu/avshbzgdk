---
import AdminLayout from "../../layouts/AdminLayout.astro";
---

<AdminLayout title="Visitor Logs">
  <div class="bg-white shadow-lg rounded-lg p-6">
    <h2 class="text-2xl font-bold text-gray-800 mb-6">Visitor Logs</h2>
    
    <div class="mb-4 flex justify-between items-center">
      <div class="text-sm text-gray-600">
        <span id="totalVisits">Yükleniyor...</span> toplam ziyaretçi
      </div>
      <button 
        id="refreshBtn"
        class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition duration-200"
      >
        Yenile
      </button>
    </div>

    <div class="overflow-x-auto">
      <table class="min-w-full bg-white border border-gray-300">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Date & Time
            </th>
            <th class="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              IP Address
            </th>
            <th class="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Page
            </th>
            <th class="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Referer
            </th>
            <th class="px-6 py-3 border-b-2 border-gray-300 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              User Agent
            </th>
          </tr>
        </thead>
        <tbody id="visitorLogsTable" class="bg-white divide-y divide-gray-200">
          <tr>
            <td colspan="5" class="px-6 py-4 text-center text-gray-500">
                Ziyaretçi kayıtları yükleniyor...
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <div class="mt-6 flex items-center justify-between">
      <div class="text-sm text-gray-700">
        Gösteriliyor <span id="currentRange">0-0</span> toplam <span id="totalCount">0</span> ziyaretçi
      </div>
      <div class="flex space-x-2">
        <button 
          id="prevBtn"
          class="px-3 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Önceki
        </button>
        <button 
          id="nextBtn"
          class="px-3 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Sonraki
        </button>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  let currentPage = 1;
  const logsPerPage = 20;
  /**
   * @typedef {{
   *   visitDate: string,
   *   ip: string,
   *   page: string,
   *   referer?: string,
   *   userAgent: string
   * }} VisitorLog
   */
  /** @type {VisitorLog[]} */
  let allLogs: VisitorLog[] = [];

  async function loadVisitorLogs() {
    try {
      const response = await fetch('/api/visitor-log');
      if (!response.ok) {
        throw new Error('Failed to fetch visitor logs');
      }
      
      allLogs = await response.json();
      updateDisplay();
    } catch (error) {
      console.error('Error loading visitor logs:', error);
      const visitorLogsTable = document.getElementById('visitorLogsTable');
      if (visitorLogsTable) {
        visitorLogsTable.innerHTML = `
          <tr>
            <td colspan="5" class="px-6 py-4 text-center text-red-500">
              Error loading visitor logs
            </td>
          </tr>
        `;
      }
    }
  }

  function updateDisplay() {
    const startIndex = (currentPage - 1) * logsPerPage;
    const endIndex = startIndex + logsPerPage;
    const pageData = allLogs.slice(startIndex, endIndex);

    // Update table
    const tbody = document.getElementById('visitorLogsTable');
    if (!tbody) {
      return;
    }
    if (pageData.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="5" class="px-6 py-4 text-center text-gray-500">
            No visitor logs found
          </td>
        </tr>
      `;
    } else {
      tbody.innerHTML = pageData.map(log => {
        const date = new Date(log.visitDate);
        const formattedDate = date.toLocaleString('tr-TR');
        const truncatedUserAgent = log.userAgent.length > 20 
          ? log.userAgent.substring(0, 20) + '...' 
          : log.userAgent;
        
        return `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
              ${formattedDate}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-mono">
              ${log.ip}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
              ${log.page}
            </td>
            <td class="px-6 py-4 text-sm text-gray-900 max-w-xs truncate">
              ${log.referer || '-'}
            </td>
            <td class="px-6 py-4 text-sm text-gray-500 max-w-xs truncate" title="${log.userAgent}">
              ${truncatedUserAgent}
            </td>
          </tr>
        `;
      }).join('');
    }

    // Update counters and pagination
    const totalVisitsElem = document.getElementById('totalVisits');
    if (totalVisitsElem) {
      totalVisitsElem.textContent = allLogs.length.toString();
    }
    const totalCountElem = document.getElementById('totalCount');
    if (totalCountElem) {
      totalCountElem.textContent = allLogs.length.toString();
    }
    const currentRangeElem = document.getElementById('currentRange');
    if (currentRangeElem) {
      currentRangeElem.textContent = 
        `${startIndex + 1}-${Math.min(endIndex, allLogs.length)}`;
    }

    // Update pagination buttons
    const prevBtn = document.getElementById('prevBtn') as HTMLButtonElement | null;
    const nextBtn = document.getElementById('nextBtn') as HTMLButtonElement | null;
    
    if (prevBtn) prevBtn.disabled = currentPage === 1;
    if (nextBtn) nextBtn.disabled = endIndex >= allLogs.length;
  }

  // Event listeners
  const refreshBtn = document.getElementById('refreshBtn');
  if (refreshBtn) {
    refreshBtn.addEventListener('click', loadVisitorLogs);
  }
  
  const prevBtnEl = document.getElementById('prevBtn');
  if (prevBtnEl) {
    prevBtnEl.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        updateDisplay();
      }
    });
  }

  const nextBtnEl = document.getElementById('nextBtn');
  if (nextBtnEl) {
    nextBtnEl.addEventListener('click', () => {
      if ((currentPage * logsPerPage) < allLogs.length) {
        currentPage++;
        updateDisplay();
      }
    });
  }

  // Load data on page load
  document.addEventListener('DOMContentLoaded', loadVisitorLogs);
</script>